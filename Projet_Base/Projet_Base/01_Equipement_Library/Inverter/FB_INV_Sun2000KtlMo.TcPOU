<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_INV_Sun2000KtlMo" Id="{60dfbf83-f711-4e8e-9ba4-f1aeac3d200e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_INV_Sun2000KtlMo EXTENDS FB_INV_Base

VAR_INPUT PERSISTENT
	// Parameters of the Object (instance specific)
	{attribute 'OPC.UA.DA' := '1'}  
	ParamIPAddress	   : STRING := '127.0.0.1'; 	(* (NA)Config: IP Adress of PV INverter*)
	{attribute 'OPC.UA.DA' := '1'} 	
	ParamTcpPort		: UINT := 502;				(* (NA)Modbus TCP port*)
	{attribute 'OPC.UA.DA' := '1'} 
	ParamUnitID 		: BYTE  := 1; 	  			(* (NA)   SMA Modbus Unit ID. *)
	ParamID_INV			: BYTE ; 		        	(* (NA) Config :Numerous of the ESS in the PP*)
	ParamID_PTR			: BYTE ; 		        	(* (NA) Config :Numerous of the ESS in the PP*)

END_VAR

VAR_OUTPUT
	//Child objects

END_VAR

VAR
	//M_Acknowledge
		
	// M_ALARMMNGMT VARIABLES //
	MesAlarmCode1			: WORD ; 
	MesAlarmCode2			: WORD ; 
	
	// M_READ VARIABLES//
		Trig_Read					: R_TRIG;

		FB_ModbusRead_I2          	: FB_ModbusRead ; 									// (NA) FB for Modbus Reading
		FB_ModbusRead_I3          	: FB_ModbusRead ; 									// (NA) FB for Modbus Reading

		MesBlock_Temp 				: ARRAY[1..2] OF ARRAY [1..125] OF WORD ; 			// (NA) Temporary Block with multiple modbus reading (Caution : Double Word variables)

		AX_Busy						: ARRAY[1..2] OF BOOL;
		AX_Error					: ARRAY[1..2] OF BOOL;
		AX_ErrorID					: ARRAY[1..2] OF UDINT;

		MesDataExd				AT %Q*	: INV_Huawei ; 

	// M_CP

		
	// M_STATEMANAGER//
	
	//M_EXECUTE VARIABLES //
		TP_READ						: LTP; 		//Tempo de cadencement FB Modbus
		RTrig						: R_Trig; 	//Front montant sur TP_READ.Q
		ReadBusy					: BOOL;		//FB Modbus en busy

	//M_CURTAIL 
	
		// M_CURTAIL VARIABLES //
	
		FB_ModbusWrite1 		  	: FB_ModbusWrite; 					// (NA) Functionnal Block for Writing Curtail limit through modbus
		FB_ModbusWrite2 		  	: FB_ModbusWrite; 					// (NA) Functionnal Block for Writing Curtail limit through modbus
	
		MesWriteBlock_Temp			: WORD;												// (NA) Temporary Block with multiple modbus writing	 
	
		MesModbusCurtailAlarm		: BOOL ;				   							// (NA) Modbus Write Curtail Alarm 
		MesModbusWriteCode          : UDINT ; 											// (NA) Modbus Write Alarm Code 			 
		
		WriteBlock_Temp1 				: WORD; 	// Temporary Block with multiple modbus writing	
		WriteBlock_Temp2 				: WORD; 	// Temporary Block with multiple modbus writing

	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="M_AlarmManagement" Id="{78a1c34e-8931-442e-b78c-65b5d97626de}">
      <Declaration><![CDATA[METHOD M_AlarmManagement
//////////////////
// Manages IntelliGen Alarms
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	FB_AlarmCodeManager : FB_AlarmCodeManager ; 

	KK					: BYTE;		// For Loop 
	

	ComAlarm: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//COMMUNICATION//
// CALC INVERT STAT ERREUR //

ComAlarm :=AX_Error[1] OR AX_Error[2] ; 
TON_ComAlarm(IN:= ComAlarm , PT:= ParamTempoComAlarm, Q=>MesDataExd.MesData.MesAlarmCom) ;	

// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= MesDataExd.MesAlm1.0,		// High String Voltage #Equipment
		bAlarm2			:= MesDataExd.MesAlm1.1,		// DC Arc Fault #Equipment
		bAlarm3			:= MesDataExd.MesAlm1.2,		// String Reversed #Equipment
		bAlarm4			:= MesDataExd.MesAlm1.5, 	//    AFCI Self-test Fault    #Equipment 
		bAlarm5			:= MesDataExd.MesAlm1.6,	// Short circuit between phase to PE #Equipment
		bAlarm6			:= MesDataExd.MesAlm1.7,	 //Power Grid Failure #Equipment
		bAlarm7			:= MesDataExd.MesAlm1.8,     //Grid Undervoltage #Equipment
		bAlarm8			:= MesDataExd.MesAlm1.9,     //Grid Overvoltag #Equipment
		bAlarm9			:= MesDataExd.MesAlm1.10,    //Unbalanced Grid Voltage #Equipment
		bAlarm10		:= MesDataExd.MesAlm1.11,    //Grid Overfrequency #Equipment
		bAlarm11		:= MesDataExd.MesAlm1.12,    //Grid Underfrequency #Equipment
		bAlarm12		:= MesDataExd.MesAlm1.13,    //Grid Frequency Instability #Equipment
		bAlarm13		:= MesDataExd.MesAlm1.14,    //Output Overcurrent #Equipment
		bAlarm14		:= MesDataExd.MesAlm1.15, 	 //	Large DC of Output current	 #Equipment								
		bAlarm15		:= FALSE,//
		wAlarmCode		=> MesDataExd.MesData.MesAlarmCode);

// WARNING CODE //
	FB_AlarmCodeManager(
 		bAlarm1			:= MesDataExd.MesAlm2.0,//Abnormal Leakage Current #Equipment
		bAlarm2			:= MesDataExd.MesAlm2.1,//Abnormal Ground. #Equipment
		bAlarm3			:= MesDataExd.MesAlm2.2,//Low Insulation Res #Equipment
		bAlarm4			:= MesDataExd.MesAlm2.3,//High Temperature #Equipment
		bAlarm5			:= MesDataExd.MesAlm2.4,//Abnormal Equipment #Equipment
		bAlarm6			:= MesDataExd.MesAlm3.2,//High String Voltage to Ground #Equipment
		bAlarm7			:= MesDataExd.MesAlm2.5,//Upgrade Failed #Equipment
		bAlarm8			:= MesDataExd.MesAlm2.7,//Abnormal Monitor Unit #Equipment
		bAlarm9			:= MesDataExd.MesAlm3.1,//Built-in PID operation abnormal #Equipment
		bAlarm10		:= FALSE,//
		bAlarm11		:= FALSE,//
		bAlarm12		:= FALSE,//
		bAlarm13		:= FALSE,//
		bAlarm14		:= FALSE,//
		bAlarm15		:= MesDataExd.MesData.MesAlarmCom,//
		wAlarmCode		=> MesDataExd.MesData.MesWarningCode);	

// EVENT CODE //
	FB_AlarmCodeManager(
		bAlarm1			:= MesDataExd.MesAlm1.3, 			// PV String Backfeed #Equipment
		bAlarm2			:= MesDataExd.MesAlm1.4, 		// Abnormal String #Equipment
		bAlarm3			:= MesDataExd.MesAlm2.6,	// License Expired #Equipment
		bAlarm4			:= FALSE, 	
		bAlarm5			:= FALSE, 
		bAlarm6			:= FALSE, 
		bAlarm7			:= FALSE, 
		bAlarm8			:= FALSE, 
		bAlarm9			:= FALSE, 
		bAlarm10		:= FALSE, 
		bAlarm11		:= FALSE, 
		bAlarm12		:= FALSE, 
		bAlarm13		:= FALSE, 
		bAlarm14		:= FALSE, 
		bAlarm15		:= FALSE, 
		wAlarmCode		=> MesDataExd.MesData.MesEventCode);

(*

// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm0			:= , 	// standby
		bAlarm1			:= , 	// grid-connected
		bAlarm2			:= , 	// grid-connected normally
		bAlarm3			:= ,    // grid connection with derating due to power rationing
		bAlarm4			:= ,    // grid connection with derating due to internal causes of the solar inverter
		bAlarm5			:= ,    // normal stop
		bAlarm6			:= ,    // stop due to faults
		bAlarm7			:= ,    // stop due to power rationing
		bAlarm8			:= ,    // shutdown
		bAlarm9			:= ,    // spot check
		bAlarm10		:= ,    // 
		bAlarm11		:= ,    //
		bAlarm12		:= ,    //
		bAlarm13		:= ,    //
		bAlarm14		:= ,    //
		bAlarm15		:= ,	//
		wAlarmCode		=> MesDataExd.MesStateIndic);

// ALARM CODE //
	FB_AlarmCodeManager(
		bAlarm0			:= , 	// locking status (0: locked; 1: unlocked)
		bAlarm1			:= , 	// PV connection status (0: disconnected; 1: connected)
		bAlarm2			:= , 	// DSP data collection (0: no; 1: yes)
		bAlarm3			:= ,    // 
		bAlarm4			:= ,    // 
		bAlarm5			:= ,    // 
		bAlarm6			:= ,    // 
		bAlarm7			:= ,    // 
		bAlarm8			:= ,    // 
		bAlarm9			:= ,    // 
		bAlarm10		:= ,    // 
		bAlarm11		:= ,    //
		bAlarm12		:= ,    //
		bAlarm13		:= ,    //
		bAlarm14		:= ,    //
		bAlarm15		:= ,	//
		wAlarmCode		=> MesDataExd.MesOpeStatus);


*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CP" Id="{2e228b3c-1e56-433e-b3f0-82b344a80a91}">
      <Declaration><![CDATA[METHOD M_CP
//////////////////
//  Emulator
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.M_CP() ; 

//CTU(CU:=ClockRead , RESET:=CTU.Q , PV:=14 ) ; 
 

MesCP_Read				:=MesCP_Read ;//AND ((CTU.CV MOD 4) = (ParamInvNum MOD 4))   ; 

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Curtail" Id="{97b233d2-7758-47bc-b289-a74bb4fdf159}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Curtail'}
METHOD M_Curtail
//////////////////
// Write Curtail Command through modbus to PV inverters.  
//////////////////
VAR 
	// Method local variables (reinitialized at each cycle) 
	SetptPlimit_Temp: INT;
	SetptQlimit_Temp: INT;	 
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF	MesDataExd.MesData.MesCP_Write THEN

// MODBUS VARIABLE FORMATING //
	MesDataExd.MesData.OUT_SetptPLimit	:= MIN(100,MAX(0, (IN_SetptPlimit/ParamPn)*100)) ; //Between 0 and 100% Pmax
	MesDataExd.MesData.OUT_SetptQ	:= MIN(1 , MAX(-1 , IN_SetptQ/ParamPn)) ; //Between -1 and 1
	
	SetptPlimit_Temp := REAL_TO_INT(MesDataExd.MesData.OUT_SetptPLimit*10);
	SetptQlimit_Temp := REAL_TO_INT(MesDataExd.MesData.OUT_SetptQ*1000);
	
	WriteBlock_Temp1 := INT_TO_WORD(SetptPlimit_Temp) ; 
	WriteBlock_Temp2 := INT_TO_WORD(SetptQlimit_Temp) ; 

	// MODBUS REQUEST //	
	// Modbus Blocks write
	
	FB_ModbusWrite1(
		pSrcAddr 			:= ADR(WriteBlock_Temp1), 
		cbLength			:= SIZEOF(WriteBlock_Temp1),
		nQuantity 			:= 1,
		Reset				:=CmdClearFault_G, 
		sIPAddr				:=ParamIPAddress ,
		nTCPport			:=ParamTcpPort ,  
		nUnitID				:=ParamUnitID , 
		nMBAddr				:=40125 , 
		tTimeout			:=ParamTimeout ,
		WriteCmd			:=ClockWrite AND MesDataExd.MesData.MesCP_Write, 
		ModbusWriteAlarm	=>MesModbusCurtailAlarm , 
		ErrorId				=> MesModbusWriteCode)
	; 
	
		FB_ModbusWrite2(
		pSrcAddr 			:= ADR(WriteBlock_Temp2), 
		cbLength			:= SIZEOF(WriteBlock_Temp2),
		nQuantity 			:= 1,
		Reset				:=CmdClearFault_G, 
		sIPAddr				:=ParamIPAddress ,
		nTCPport			:=ParamTcpPort ,  
		nUnitID				:=ParamUnitID , 
		nMBAddr				:=40123 , 
		tTimeout			:=ParamTimeout ,
		WriteCmd			:=ClockWrite AND MesDataExd.MesData.MesCP_Write, 
		ModbusWriteAlarm	=>MesModbusCurtailAlarm , 
		ErrorId				=> MesModbusWriteCode)
		
		
	; 

END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Init" Id="{5bfdf5d3-8297-4ccd-9132-cc18f3ab1e12}">
      <Declaration><![CDATA[METHOD M_Init
VAR_INPUT
END_VAR

VAR

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ParamPn := 60 ;

bInit := FALSE;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Read" Id="{895d2947-03ef-443c-955a-76e91299c074}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Read'}
METHOD M_Read
//////////
// Read Method for SMA : Modbus reading
//////////
VAR
	// Method local variables (reinitialized at each cycle) 
	KK					: BYTE;						 // Index to loop over modbus blocks. 	
	JJ					: BYTE;
	AX_Adr				: ARRAY[1..2] OF WORD 		:= [32000,	40120];
	AX_Qty				: ARRAY[1..2] OF WORD		:= [110,	100];
	AX_StructRTU		: ARRAY[1..2] OF Struct_InputRTU ;
	
	MW					: FB_MergeWordsToDint;
	MesModbusReadAlarm2: BOOL;
	MesModbusReadAlarm3: BOOL;
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF MesCP_Read THEN	

	//INITIALIZING MODBUS REQUESTS //
//FB_ModbusRead_I2.Param
FB_ModbusRead_I2(ClockRead:= ClockRead AND MesCP_Read, Reset:= CmdClearFault_G ,sIPAddr:=ParamIPAddress , nUnitID:= ParamUnitID, tTimeout:= ParamTimeout,nTcpPort := ParamTcpPort, ParamEnableRetryPause:= TRUE);
//FB_ModbusRead_I3(ClockRead:= ClockRead AND MesCP_Read, Reset:= CalFaultClear_G ,sIPAddr:=ParamIPAdress , nUnitID:= ParamUnitID, tTimeout:= ParamTimeout,nTcpPort := ParamnTcpPort);

// MODBUS REQUEST//
	FB_ModbusRead_I2(
		nQuantity		:= 110, 
		nMBAddr			:= 32000, 
		cbLength		:= SIZEOF(MesBlock_Temp[1]) , 
		pDestAddr		:= ADR(MesBlock_Temp[1]) , 
		ModbusReadAlarm	=>AX_Error[1] , 
		ErrorId			=> AX_ErrorID[1]);
(*		
	FB_ModbusRead_I3(
		nQuantity		:= 100, 
		nMBAddr			:= 40120, 
		cbLength		:= SIZEOF(MesBlock_Temp[2]) , 
		pDestAddr		:= ADR(MesBlock_Temp[2]) , 
		ModbusReadAlarm	=>AX_Error[2] , 
		ErrorId			=> AX_ErrorID[2]);		
*)		
	
// MODBUS BLOCKS SEPARATION	


MesDataExd.MesStateIndic := MesBlock_Temp[1][1];
MesDataExd.MesOpeStatus := MesBlock_Temp[1][3];
MesDataExd.MesAlm1 := MesBlock_Temp[1][9];
MesDataExd.MesAlm2 := MesBlock_Temp[1][10];
MesDataExd.MesAlm3 := MesBlock_Temp[1][11];

FOR KK:=1  TO 12 DO 
	MW(WORD_STRONG := MesBlock_Temp[1][17+(KK-1)*2], FIX := 1, SIGNED := TRUE, VAR_OUT := MesdataExd.STR[KK].MesUdc	);
	MW(WORD_STRONG := MesBlock_Temp[1][17+(KK-1)*2+1], FIX := 2, SIGNED := TRUE, VAR_OUT := MesdataExd.STR[KK].MesIdc	);
END_FOR

MW(WORD_STRONG := MesBlock_Temp[1][65],WORD_WEAK := MesBlock_Temp[1][66], FIX := 3, Size := 2, SIGNED := TRUE, VAR_OUT := MesdataExd.Mesdata.MesPdc);
MW(WORD_STRONG := MesBlock_Temp[1][67], FIX := 1, Size := 1, SIGNED := FALSE, VAR_OUT := MesdataExd.MesU12);
MW(WORD_STRONG := MesBlock_Temp[1][68], FIX := 1, Size := 1, SIGNED := FALSE, VAR_OUT := MesdataExd.MesU23);
MW(WORD_STRONG := MesBlock_Temp[1][69], FIX := 1, Size := 1, SIGNED := FALSE, VAR_OUT := MesdataExd.MesU31);
MW(WORD_STRONG := MesBlock_Temp[1][70], FIX := 1, Size := 1, SIGNED := FALSE, VAR_OUT := MesdataExd.MesV1);
MW(WORD_STRONG := MesBlock_Temp[1][71], FIX := 1, Size := 1, SIGNED := FALSE, VAR_OUT := MesdataExd.MesV2);
MW(WORD_STRONG := MesBlock_Temp[1][72], FIX := 1, Size := 1, SIGNED := FALSE, VAR_OUT := MesdataExd.MesV3);
MW(WORD_STRONG := MesBlock_Temp[1][73], WORD_WEAK := MesBlock_Temp[1][74], FIX := 3, Size := 2, SIGNED := TRUE, VAR_OUT := MesdataExd.MesI1);
MW(WORD_STRONG := MesBlock_Temp[1][75], WORD_WEAK := MesBlock_Temp[1][76], FIX := 3, Size := 2, SIGNED := TRUE, VAR_OUT := MesdataExd.MesI2);
MW(WORD_STRONG := MesBlock_Temp[1][77], WORD_WEAK := MesBlock_Temp[1][78], FIX := 3, Size := 2, SIGNED := TRUE, VAR_OUT := MesdataExd.MesI3);

MW(WORD_STRONG := MesBlock_Temp[1][81], WORD_WEAK := MesBlock_Temp[1][82], FIX := 3, Size := 2, SIGNED := FALSE, VAR_OUT := MesdataExd.Mesdata.MesP);
MW(WORD_STRONG := MesBlock_Temp[1][83], WORD_WEAK := MesBlock_Temp[1][84], FIX := 3, Size := 2, SIGNED := TRUE, VAR_OUT := MesdataExd.Mesdata.MesQ);
MW(WORD_STRONG := MesBlock_Temp[1][85], FIX := 3, Size := 1, SIGNED := 1, VAR_OUT := MesDataExd.Mesdata.MesCosPhi);
MW(WORD_STRONG := MesBlock_Temp[1][86], FIX := 2, Size := 1, SIGNED := 0, VAR_OUT := MesDataExd.Mesdata.MesFreq);
MW(WORD_STRONG := MesBlock_Temp[1][88], FIX := 1, Size := 1, SIGNED := 0, VAR_OUT := MesDataExd.Mesdata.MesTemp);
MW(WORD_STRONG := MesBlock_Temp[1][89], FIX := 3, Size := 1, SIGNED := 0, VAR_OUT := MesDataExd.Mesdata.MesInsuResistor);
MesdataExd.MesData.MesState_Inv:= MesBlock_Temp[1][90];

MW(WORD_STRONG := MesBlock_Temp[1][107], WORD_WEAK := MesBlock_Temp[1][108], FIX := 2, Size := 2, SIGNED := 0, VAR_OUT := MesdataExd.MesETot);
MW(WORD_STRONG := MesBlock_Temp[1][109], WORD_WEAK := MesBlock_Temp[1][110], FIX := 2, Size := 2, SIGNED := 0, VAR_OUT := MesdataExd.MesEDay);

END_IF

// Properties update.
MesDataExd.MesData.MesI := (MesDataExd.MesI1 + MesDataExd.MesI2 + MesDataExd.MesI3)/3;
MesDataExd.MesData.MesV := (MesDataExd.MesV1 + MesDataExd.MesV2 + MesDataExd.MesV3)/3;
MesDataExd.MesData.MesS := SQRT(MesDataExd.MesData.MesP*MesDataExd.MesData.MesP + MesDataExd.MesData.MesQ*MesDataExd.MesData.MesQ);

MesDataExd.MesData.MesCurtl := MesDataExd.MesData.MesState_Inv=16#0201 OR MesDataExd.MesData.MesState_Inv =16#0202 ; 
MesDataExd.MesData.ParamPn := ParamPn ;









]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateManager" Id="{7faa7a77-d0e7-48ac-b61e-188ec948c8d9}">
      <Declaration><![CDATA[METHOD M_StateManager
//////////////////
// Detect which is the state of the inverter. IF loss of communication MesState =0 , the last inverter state is kept .  
/////////////////

VAR 
	// Method local variables (reinitialized at each cycle) 

	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[ MesDataExd.MesData.MesIDState := 0;
 
IF (MesDataExd.MesData.MesState_Inv.0 OR MesDataExd.MesData.MesState_Inv.5 OR MesDataExd.MesData.MesState_Inv.6 OR MesDataExd.MesData.MesState_Inv.7 OR MesDataExd.MesData.MesState_Inv.8) THEN  // DO I Produce ? Or I am in normal state
	// OFF State  
	MesDataExd.MesData.MesIDState.0 		:= 1 ; 
	
ELSIF MesDataExd.MesData.MesState_Inv.1 OR MesDataExd.MesData.MesState_Inv.2 OR MesDataExd.MesData.MesState_Inv.3 OR MesDataExd.MesData.MesState_Inv.4 THEN
	// ON State
	MesDataExd.MesData.MesIDState.1 		:= 1 ;
	
END_IF

SUPER^.M_StateManager() ; ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_INV_Sun2000KtlMo">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Sun2000KtlMo.M_AlarmManagement">
      <LineId Id="590" Count="105" />
      <LineId Id="462" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Sun2000KtlMo.M_CP">
      <LineId Id="17" Count="1" />
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Sun2000KtlMo.M_Curtail">
      <LineId Id="12" Count="46" />
      <LineId Id="68" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Sun2000KtlMo.M_Init">
      <LineId Id="23" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="64" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Sun2000KtlMo.M_Read">
      <LineId Id="390" Count="1" />
      <LineId Id="388" Count="0" />
      <LineId Id="273" Count="31" />
      <LineId Id="412" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="329" Count="23" />
      <LineId Id="389" Count="0" />
      <LineId Id="353" Count="15" />
      <LineId Id="138" Count="0" />
    </LineIds>
    <LineIds Name="FB_INV_Sun2000KtlMo.M_StateManager">
      <LineId Id="148" Count="11" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>